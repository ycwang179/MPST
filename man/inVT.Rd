% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inVT.R
\name{inVT}
\alias{inVT}
\title{Determine whether points are inside a given triangulation.}
\usage{
inVT(V, Tr, Z)
}
\arguments{
\item{V}{A \code{nV} by 2 or 3 matrix of vertices of the triangulation, where \code{nV} is the number of vertices. Each row contains the coordinates of a vertex.}

\item{Tr}{A triangulation matrix of dimension \code{nT} by 3 or 4, where \code{nT} is the number of triangles (for 2D) or tetrahedra (for 3D). Each row contains the indices of vertices in \code{V}.}

\item{Z}{A matrix of 2D or 3D points to check. Each row contains the coordinates of a point.}
}
\value{
A list containing:
\item{ind.inside}{A vector indicating whether each point is inside the triangulation. 0 represents outside, and 1 represents inside.}
\item{ind.T}{A vector indicating the index of the triangle (or tetrahedron) that each point falls in. NA if the point is outside.}
\item{lam}{A matrix containing the barycentric coordinates of each point. NA for points outside the triangulation.}
}
\description{
This function determines whether points are inside a given 2D or 3D triangulation.
}
\details{
This R function is adapted from the MATLAB program written by Ming-Jun Lai (University of Georgia) and Li Wang (Iowa State University).
}
\examples{
# Example: Checking if points are inside a 2D triangulation
xx <- c(-0.25, 0.75, 0.25, 1.25)
yy <- c(-0.25, 0.25, 0.75, 1.25)
V <- rbind(c(0, 0), c(1, 0), c(1, 1), c(0, 1))
Tr <- rbind(c(1, 2, 3), c(1, 3, 4))
Z <- cbind(xx, yy)
result <- inVT(V, Tr, Z)
print(result)

}
